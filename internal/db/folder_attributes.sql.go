// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: folder_attributes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateFolderAttribute = `-- name: CreateFolderAttribute :one
INSERT INTO folder_attributes (
    folder_id,
    detail
) VALUES (
    $1, $2
)
RETURNING id, folder_id, detail
`

type CreateFolderAttributeParams struct {
	FolderID pgtype.Int4 `json:"folder_id"`
	Detail   pgtype.Text `json:"detail"`
}

func (q *Queries) CreateFolderAttribute(ctx context.Context, arg CreateFolderAttributeParams) (*FolderAttribute, error) {
	row := q.db.QueryRow(ctx, CreateFolderAttribute, arg.FolderID, arg.Detail)
	var i FolderAttribute
	err := row.Scan(&i.ID, &i.FolderID, &i.Detail)
	return &i, err
}

const DeleteFolderAttribute = `-- name: DeleteFolderAttribute :exec
DELETE FROM folder_attributes
WHERE id = $1
`

func (q *Queries) DeleteFolderAttribute(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteFolderAttribute, id)
	return err
}

const DeleteFolderAttributeByFolderID = `-- name: DeleteFolderAttributeByFolderID :exec
DELETE FROM folder_attributes
WHERE folder_id = $1
`

func (q *Queries) DeleteFolderAttributeByFolderID(ctx context.Context, folderID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, DeleteFolderAttributeByFolderID, folderID)
	return err
}

const GetFolderAttribute = `-- name: GetFolderAttribute :one
SELECT id, folder_id, detail FROM folder_attributes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFolderAttribute(ctx context.Context, id int32) (*FolderAttribute, error) {
	row := q.db.QueryRow(ctx, GetFolderAttribute, id)
	var i FolderAttribute
	err := row.Scan(&i.ID, &i.FolderID, &i.Detail)
	return &i, err
}

const GetFolderAttributeByFolderID = `-- name: GetFolderAttributeByFolderID :one
SELECT id, folder_id, detail FROM folder_attributes
WHERE folder_id = $1 LIMIT 1
`

func (q *Queries) GetFolderAttributeByFolderID(ctx context.Context, folderID pgtype.Int4) (*FolderAttribute, error) {
	row := q.db.QueryRow(ctx, GetFolderAttributeByFolderID, folderID)
	var i FolderAttribute
	err := row.Scan(&i.ID, &i.FolderID, &i.Detail)
	return &i, err
}

const ListFolderAttributes = `-- name: ListFolderAttributes :many
SELECT id, folder_id, detail FROM folder_attributes
ORDER BY id
`

func (q *Queries) ListFolderAttributes(ctx context.Context) ([]*FolderAttribute, error) {
	rows, err := q.db.Query(ctx, ListFolderAttributes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*FolderAttribute{}
	for rows.Next() {
		var i FolderAttribute
		if err := rows.Scan(&i.ID, &i.FolderID, &i.Detail); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateFolderAttribute = `-- name: UpdateFolderAttribute :one
UPDATE folder_attributes
SET detail = $2
WHERE id = $1
RETURNING id, folder_id, detail
`

type UpdateFolderAttributeParams struct {
	ID     int32       `json:"id"`
	Detail pgtype.Text `json:"detail"`
}

func (q *Queries) UpdateFolderAttribute(ctx context.Context, arg UpdateFolderAttributeParams) (*FolderAttribute, error) {
	row := q.db.QueryRow(ctx, UpdateFolderAttribute, arg.ID, arg.Detail)
	var i FolderAttribute
	err := row.Scan(&i.ID, &i.FolderID, &i.Detail)
	return &i, err
}

const UpdateFolderAttributeByFolderID = `-- name: UpdateFolderAttributeByFolderID :one
UPDATE folder_attributes
SET detail = $2
WHERE folder_id = $1
RETURNING id, folder_id, detail
`

type UpdateFolderAttributeByFolderIDParams struct {
	FolderID pgtype.Int4 `json:"folder_id"`
	Detail   pgtype.Text `json:"detail"`
}

func (q *Queries) UpdateFolderAttributeByFolderID(ctx context.Context, arg UpdateFolderAttributeByFolderIDParams) (*FolderAttribute, error) {
	row := q.db.QueryRow(ctx, UpdateFolderAttributeByFolderID, arg.FolderID, arg.Detail)
	var i FolderAttribute
	err := row.Scan(&i.ID, &i.FolderID, &i.Detail)
	return &i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: folder.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateFolder = `-- name: CreateFolder :one
INSERT INTO folder (
    folder
) VALUES (
    $1
)
RETURNING id, folder
`

func (q *Queries) CreateFolder(ctx context.Context, folder pgtype.Text) (*Folder, error) {
	row := q.db.QueryRow(ctx, CreateFolder, folder)
	var i Folder
	err := row.Scan(&i.ID, &i.Folder)
	return &i, err
}

const DeleteFolder = `-- name: DeleteFolder :exec
DELETE FROM folder
WHERE id = $1
`

func (q *Queries) DeleteFolder(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteFolder, id)
	return err
}

const GetFolder = `-- name: GetFolder :one
SELECT id, folder FROM folder
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFolder(ctx context.Context, id int32) (*Folder, error) {
	row := q.db.QueryRow(ctx, GetFolder, id)
	var i Folder
	err := row.Scan(&i.ID, &i.Folder)
	return &i, err
}

const GetFolderPermissionsByFolderId = `-- name: GetFolderPermissionsByFolderId :many
SELECT id, folder_id, user_id, permission, granted_by, granted_at FROM folder_permissions
WHERE folder_id = $1
ORDER BY id
`

func (q *Queries) GetFolderPermissionsByFolderId(ctx context.Context, folderID pgtype.Int4) ([]*FolderPermission, error) {
	rows, err := q.db.Query(ctx, GetFolderPermissionsByFolderId, folderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*FolderPermission{}
	for rows.Next() {
		var i FolderPermission
		if err := rows.Scan(
			&i.ID,
			&i.FolderID,
			&i.UserID,
			&i.Permission,
			&i.GrantedBy,
			&i.GrantedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const GetFolderWithAttributes = `-- name: GetFolderWithAttributes :one
SELECT f.id, f.folder, fa.detail
FROM folder f
LEFT JOIN folder_attributes fa ON f.id = fa.folder_id
WHERE f.id = $1
LIMIT 1
`

type GetFolderWithAttributesRow struct {
	ID     int32       `json:"id"`
	Folder pgtype.Text `json:"folder"`
	Detail pgtype.Text `json:"detail"`
}

func (q *Queries) GetFolderWithAttributes(ctx context.Context, id int32) (*GetFolderWithAttributesRow, error) {
	row := q.db.QueryRow(ctx, GetFolderWithAttributes, id)
	var i GetFolderWithAttributesRow
	err := row.Scan(&i.ID, &i.Folder, &i.Detail)
	return &i, err
}

const ListFolders = `-- name: ListFolders :many
SELECT id, folder FROM folder
ORDER BY id
`

func (q *Queries) ListFolders(ctx context.Context) ([]*Folder, error) {
	rows, err := q.db.Query(ctx, ListFolders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Folder{}
	for rows.Next() {
		var i Folder
		if err := rows.Scan(&i.ID, &i.Folder); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateFolder = `-- name: UpdateFolder :one
UPDATE folder
SET folder = $2
WHERE id = $1
RETURNING id, folder
`

type UpdateFolderParams struct {
	ID     int32       `json:"id"`
	Folder pgtype.Text `json:"folder"`
}

func (q *Queries) UpdateFolder(ctx context.Context, arg UpdateFolderParams) (*Folder, error) {
	row := q.db.QueryRow(ctx, UpdateFolder, arg.ID, arg.Folder)
	var i Folder
	err := row.Scan(&i.ID, &i.Folder)
	return &i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: roles.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateRole = `-- name: CreateRole :one
INSERT INTO roles (
    name,
    description,
    permissions
) VALUES (
    $1, $2, $3
)
RETURNING id, name, description, permissions
`

type CreateRoleParams struct {
	Name        pgtype.Text `json:"name"`
	Description pgtype.Text `json:"description"`
	Permissions pgtype.Text `json:"permissions"`
}

func (q *Queries) CreateRole(ctx context.Context, arg CreateRoleParams) (*Role, error) {
	row := q.db.QueryRow(ctx, CreateRole, arg.Name, arg.Description, arg.Permissions)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Permissions,
	)
	return &i, err
}

const DeleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteRole, id)
	return err
}

const GetRole = `-- name: GetRole :one
SELECT id, name, description, permissions FROM roles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRole(ctx context.Context, id int32) (*Role, error) {
	row := q.db.QueryRow(ctx, GetRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Permissions,
	)
	return &i, err
}

const ListRoles = `-- name: ListRoles :many
SELECT id, name, description, permissions FROM roles
ORDER BY id
`

func (q *Queries) ListRoles(ctx context.Context) ([]*Role, error) {
	rows, err := q.db.Query(ctx, ListRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Role{}
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Permissions,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateRole = `-- name: UpdateRole :one
UPDATE roles
SET name = $2,
    description = $3,
    permissions = $4
WHERE id = $1
RETURNING id, name, description, permissions
`

type UpdateRoleParams struct {
	ID          int32       `json:"id"`
	Name        pgtype.Text `json:"name"`
	Description pgtype.Text `json:"description"`
	Permissions pgtype.Text `json:"permissions"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (*Role, error) {
	row := q.db.QueryRow(ctx, UpdateRole,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Permissions,
	)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Permissions,
	)
	return &i, err
}

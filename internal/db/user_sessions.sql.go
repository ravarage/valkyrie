// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_sessions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateSession = `-- name: CreateSession :one
INSERT INTO user_sessions (
    user_id,
    token,
    expires_at
) VALUES (
    $1, $2, $3
)
RETURNING id, user_id, token, expires_at, created_at
`

type CreateSessionParams struct {
	UserID    pgtype.Int4      `json:"user_id"`
	Token     string           `json:"token"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (*UserSession, error) {
	row := q.db.QueryRow(ctx, CreateSession, arg.UserID, arg.Token, arg.ExpiresAt)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return &i, err
}

const DeleteExpiredSessions = `-- name: DeleteExpiredSessions :exec
DELETE FROM user_sessions
WHERE expires_at < NOW()
`

func (q *Queries) DeleteExpiredSessions(ctx context.Context) error {
	_, err := q.db.Exec(ctx, DeleteExpiredSessions)
	return err
}

const DeleteSession = `-- name: DeleteSession :exec
DELETE FROM user_sessions
WHERE token = $1
`

func (q *Queries) DeleteSession(ctx context.Context, token string) error {
	_, err := q.db.Exec(ctx, DeleteSession, token)
	return err
}

const DeleteUserSessions = `-- name: DeleteUserSessions :exec
DELETE FROM user_sessions
WHERE user_id = $1
`

func (q *Queries) DeleteUserSessions(ctx context.Context, userID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, DeleteUserSessions, userID)
	return err
}

const GetSession = `-- name: GetSession :one
SELECT id, user_id, token, expires_at, created_at FROM user_sessions
WHERE id = $1 AND created_at = $2
LIMIT 1
`

type GetSessionParams struct {
	ID        int64            `json:"id"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) GetSession(ctx context.Context, arg GetSessionParams) (*UserSession, error) {
	row := q.db.QueryRow(ctx, GetSession, arg.ID, arg.CreatedAt)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return &i, err
}

const GetSessionByToken = `-- name: GetSessionByToken :one
SELECT id, user_id, token, expires_at, created_at FROM user_sessions
WHERE token = $1 AND expires_at > NOW()
LIMIT 1
`

func (q *Queries) GetSessionByToken(ctx context.Context, token string) (*UserSession, error) {
	row := q.db.QueryRow(ctx, GetSessionByToken, token)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return &i, err
}

const ListUserSessions = `-- name: ListUserSessions :many
SELECT id, user_id, token, expires_at, created_at FROM user_sessions
WHERE user_id = $1 AND expires_at > NOW()
ORDER BY created_at DESC
`

func (q *Queries) ListUserSessions(ctx context.Context, userID pgtype.Int4) ([]*UserSession, error) {
	rows, err := q.db.Query(ctx, ListUserSessions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*UserSession{}
	for rows.Next() {
		var i UserSession
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Token,
			&i.ExpiresAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateSessionExpiry = `-- name: UpdateSessionExpiry :one
UPDATE user_sessions
SET expires_at = $2
WHERE token = $1
RETURNING id, user_id, token, expires_at, created_at
`

type UpdateSessionExpiryParams struct {
	Token     string           `json:"token"`
	ExpiresAt pgtype.Timestamp `json:"expires_at"`
}

func (q *Queries) UpdateSessionExpiry(ctx context.Context, arg UpdateSessionExpiryParams) (*UserSession, error) {
	row := q.db.QueryRow(ctx, UpdateSessionExpiry, arg.Token, arg.ExpiresAt)
	var i UserSession
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return &i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: folder_permissions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CheckUserHasFolderPermission = `-- name: CheckUserHasFolderPermission :one
SELECT EXISTS (
    SELECT 1 FROM folder_permissions
    WHERE folder_id = $1 
    AND user_id = $2 
    AND permission = $3
) AS has_permission
`

type CheckUserHasFolderPermissionParams struct {
	FolderID   pgtype.Int4 `json:"folder_id"`
	UserID     pgtype.Int4 `json:"user_id"`
	Permission string      `json:"permission"`
}

func (q *Queries) CheckUserHasFolderPermission(ctx context.Context, arg CheckUserHasFolderPermissionParams) (bool, error) {
	row := q.db.QueryRow(ctx, CheckUserHasFolderPermission, arg.FolderID, arg.UserID, arg.Permission)
	var has_permission bool
	err := row.Scan(&has_permission)
	return has_permission, err
}

const CreateFolderPermission = `-- name: CreateFolderPermission :one
INSERT INTO folder_permissions (
    folder_id,
    user_id,
    permission,
    granted_by
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, folder_id, user_id, permission, granted_by, granted_at
`

type CreateFolderPermissionParams struct {
	FolderID   pgtype.Int4 `json:"folder_id"`
	UserID     pgtype.Int4 `json:"user_id"`
	Permission string      `json:"permission"`
	GrantedBy  pgtype.Int4 `json:"granted_by"`
}

func (q *Queries) CreateFolderPermission(ctx context.Context, arg CreateFolderPermissionParams) (*FolderPermission, error) {
	row := q.db.QueryRow(ctx, CreateFolderPermission,
		arg.FolderID,
		arg.UserID,
		arg.Permission,
		arg.GrantedBy,
	)
	var i FolderPermission
	err := row.Scan(
		&i.ID,
		&i.FolderID,
		&i.UserID,
		&i.Permission,
		&i.GrantedBy,
		&i.GrantedAt,
	)
	return &i, err
}

const DeleteFolderPermission = `-- name: DeleteFolderPermission :exec
DELETE FROM folder_permissions
WHERE id = $1
`

func (q *Queries) DeleteFolderPermission(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteFolderPermission, id)
	return err
}

const DeleteUserFolderPermission = `-- name: DeleteUserFolderPermission :exec
DELETE FROM folder_permissions
WHERE folder_id = $1 AND user_id = $2
`

type DeleteUserFolderPermissionParams struct {
	FolderID pgtype.Int4 `json:"folder_id"`
	UserID   pgtype.Int4 `json:"user_id"`
}

func (q *Queries) DeleteUserFolderPermission(ctx context.Context, arg DeleteUserFolderPermissionParams) error {
	_, err := q.db.Exec(ctx, DeleteUserFolderPermission, arg.FolderID, arg.UserID)
	return err
}

const GetFolderPermission = `-- name: GetFolderPermission :one
SELECT id, folder_id, user_id, permission, granted_by, granted_at FROM folder_permissions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFolderPermission(ctx context.Context, id int32) (*FolderPermission, error) {
	row := q.db.QueryRow(ctx, GetFolderPermission, id)
	var i FolderPermission
	err := row.Scan(
		&i.ID,
		&i.FolderID,
		&i.UserID,
		&i.Permission,
		&i.GrantedBy,
		&i.GrantedAt,
	)
	return &i, err
}

const GetUserFolderPermission = `-- name: GetUserFolderPermission :one
SELECT id, folder_id, user_id, permission, granted_by, granted_at FROM folder_permissions
WHERE folder_id = $1 AND user_id = $2
LIMIT 1
`

type GetUserFolderPermissionParams struct {
	FolderID pgtype.Int4 `json:"folder_id"`
	UserID   pgtype.Int4 `json:"user_id"`
}

func (q *Queries) GetUserFolderPermission(ctx context.Context, arg GetUserFolderPermissionParams) (*FolderPermission, error) {
	row := q.db.QueryRow(ctx, GetUserFolderPermission, arg.FolderID, arg.UserID)
	var i FolderPermission
	err := row.Scan(
		&i.ID,
		&i.FolderID,
		&i.UserID,
		&i.Permission,
		&i.GrantedBy,
		&i.GrantedAt,
	)
	return &i, err
}

const ListFolderPermissions = `-- name: ListFolderPermissions :many
SELECT id, folder_id, user_id, permission, granted_by, granted_at FROM folder_permissions
WHERE folder_id = $1
ORDER BY id
`

func (q *Queries) ListFolderPermissions(ctx context.Context, folderID pgtype.Int4) ([]*FolderPermission, error) {
	rows, err := q.db.Query(ctx, ListFolderPermissions, folderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*FolderPermission{}
	for rows.Next() {
		var i FolderPermission
		if err := rows.Scan(
			&i.ID,
			&i.FolderID,
			&i.UserID,
			&i.Permission,
			&i.GrantedBy,
			&i.GrantedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListUserFolderPermissions = `-- name: ListUserFolderPermissions :many
SELECT id, folder_id, user_id, permission, granted_by, granted_at FROM folder_permissions
WHERE user_id = $1
ORDER BY id
`

func (q *Queries) ListUserFolderPermissions(ctx context.Context, userID pgtype.Int4) ([]*FolderPermission, error) {
	rows, err := q.db.Query(ctx, ListUserFolderPermissions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*FolderPermission{}
	for rows.Next() {
		var i FolderPermission
		if err := rows.Scan(
			&i.ID,
			&i.FolderID,
			&i.UserID,
			&i.Permission,
			&i.GrantedBy,
			&i.GrantedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateFolderPermission = `-- name: UpdateFolderPermission :one
UPDATE folder_permissions
SET permission = $2
WHERE id = $1
RETURNING id, folder_id, user_id, permission, granted_by, granted_at
`

type UpdateFolderPermissionParams struct {
	ID         int32  `json:"id"`
	Permission string `json:"permission"`
}

func (q *Queries) UpdateFolderPermission(ctx context.Context, arg UpdateFolderPermissionParams) (*FolderPermission, error) {
	row := q.db.QueryRow(ctx, UpdateFolderPermission, arg.ID, arg.Permission)
	var i FolderPermission
	err := row.Scan(
		&i.ID,
		&i.FolderID,
		&i.UserID,
		&i.Permission,
		&i.GrantedBy,
		&i.GrantedAt,
	)
	return &i, err
}

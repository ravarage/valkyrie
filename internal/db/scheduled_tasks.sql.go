// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: scheduled_tasks.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateScheduledTask = `-- name: CreateScheduledTask :one
INSERT INTO scheduled_tasks (
    name,
    type,
    schedule,
    next_run,
    status,
    config
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, name, type, schedule, last_run, next_run, status, config, created_at
`

type CreateScheduledTaskParams struct {
	Name     string           `json:"name"`
	Type     string           `json:"type"`
	Schedule pgtype.Text      `json:"schedule"`
	NextRun  pgtype.Timestamp `json:"next_run"`
	Status   pgtype.Text      `json:"status"`
	Config   []byte           `json:"config"`
}

func (q *Queries) CreateScheduledTask(ctx context.Context, arg CreateScheduledTaskParams) (*ScheduledTask, error) {
	row := q.db.QueryRow(ctx, CreateScheduledTask,
		arg.Name,
		arg.Type,
		arg.Schedule,
		arg.NextRun,
		arg.Status,
		arg.Config,
	)
	var i ScheduledTask
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Schedule,
		&i.LastRun,
		&i.NextRun,
		&i.Status,
		&i.Config,
		&i.CreatedAt,
	)
	return &i, err
}

const DeleteScheduledTask = `-- name: DeleteScheduledTask :exec
DELETE FROM scheduled_tasks
WHERE id = $1
`

func (q *Queries) DeleteScheduledTask(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteScheduledTask, id)
	return err
}

const GetScheduledTask = `-- name: GetScheduledTask :one
SELECT id, name, type, schedule, last_run, next_run, status, config, created_at FROM scheduled_tasks
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetScheduledTask(ctx context.Context, id int32) (*ScheduledTask, error) {
	row := q.db.QueryRow(ctx, GetScheduledTask, id)
	var i ScheduledTask
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Schedule,
		&i.LastRun,
		&i.NextRun,
		&i.Status,
		&i.Config,
		&i.CreatedAt,
	)
	return &i, err
}

const GetScheduledTaskByName = `-- name: GetScheduledTaskByName :one
SELECT id, name, type, schedule, last_run, next_run, status, config, created_at FROM scheduled_tasks
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetScheduledTaskByName(ctx context.Context, name string) (*ScheduledTask, error) {
	row := q.db.QueryRow(ctx, GetScheduledTaskByName, name)
	var i ScheduledTask
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Schedule,
		&i.LastRun,
		&i.NextRun,
		&i.Status,
		&i.Config,
		&i.CreatedAt,
	)
	return &i, err
}

const ListActiveScheduledTasks = `-- name: ListActiveScheduledTasks :many
SELECT id, name, type, schedule, last_run, next_run, status, config, created_at FROM scheduled_tasks
WHERE status = 'active'
ORDER BY next_run
`

func (q *Queries) ListActiveScheduledTasks(ctx context.Context) ([]*ScheduledTask, error) {
	rows, err := q.db.Query(ctx, ListActiveScheduledTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ScheduledTask{}
	for rows.Next() {
		var i ScheduledTask
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Schedule,
			&i.LastRun,
			&i.NextRun,
			&i.Status,
			&i.Config,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListDueScheduledTasks = `-- name: ListDueScheduledTasks :many
SELECT id, name, type, schedule, last_run, next_run, status, config, created_at FROM scheduled_tasks
WHERE status = 'active' AND next_run <= NOW()
ORDER BY next_run
`

func (q *Queries) ListDueScheduledTasks(ctx context.Context) ([]*ScheduledTask, error) {
	rows, err := q.db.Query(ctx, ListDueScheduledTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ScheduledTask{}
	for rows.Next() {
		var i ScheduledTask
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Schedule,
			&i.LastRun,
			&i.NextRun,
			&i.Status,
			&i.Config,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListScheduledTasks = `-- name: ListScheduledTasks :many
SELECT id, name, type, schedule, last_run, next_run, status, config, created_at FROM scheduled_tasks
ORDER BY id
`

func (q *Queries) ListScheduledTasks(ctx context.Context) ([]*ScheduledTask, error) {
	rows, err := q.db.Query(ctx, ListScheduledTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ScheduledTask{}
	for rows.Next() {
		var i ScheduledTask
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Schedule,
			&i.LastRun,
			&i.NextRun,
			&i.Status,
			&i.Config,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListScheduledTasksByType = `-- name: ListScheduledTasksByType :many
SELECT id, name, type, schedule, last_run, next_run, status, config, created_at FROM scheduled_tasks
WHERE type = $1
ORDER BY id
`

func (q *Queries) ListScheduledTasksByType(ctx context.Context, type_ string) ([]*ScheduledTask, error) {
	rows, err := q.db.Query(ctx, ListScheduledTasksByType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ScheduledTask{}
	for rows.Next() {
		var i ScheduledTask
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Schedule,
			&i.LastRun,
			&i.NextRun,
			&i.Status,
			&i.Config,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ToggleTaskStatus = `-- name: ToggleTaskStatus :one
UPDATE scheduled_tasks
SET status = CASE WHEN status = 'active' THEN 'inactive' ELSE 'active' END
WHERE id = $1
RETURNING id, name, type, schedule, last_run, next_run, status, config, created_at
`

func (q *Queries) ToggleTaskStatus(ctx context.Context, id int32) (*ScheduledTask, error) {
	row := q.db.QueryRow(ctx, ToggleTaskStatus, id)
	var i ScheduledTask
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Schedule,
		&i.LastRun,
		&i.NextRun,
		&i.Status,
		&i.Config,
		&i.CreatedAt,
	)
	return &i, err
}

const UpdateScheduledTask = `-- name: UpdateScheduledTask :one
UPDATE scheduled_tasks
SET name = $2,
    type = $3,
    schedule = $4,
    next_run = $5,
    status = $6,
    config = $7
WHERE id = $1
RETURNING id, name, type, schedule, last_run, next_run, status, config, created_at
`

type UpdateScheduledTaskParams struct {
	ID       int32            `json:"id"`
	Name     string           `json:"name"`
	Type     string           `json:"type"`
	Schedule pgtype.Text      `json:"schedule"`
	NextRun  pgtype.Timestamp `json:"next_run"`
	Status   pgtype.Text      `json:"status"`
	Config   []byte           `json:"config"`
}

func (q *Queries) UpdateScheduledTask(ctx context.Context, arg UpdateScheduledTaskParams) (*ScheduledTask, error) {
	row := q.db.QueryRow(ctx, UpdateScheduledTask,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.Schedule,
		arg.NextRun,
		arg.Status,
		arg.Config,
	)
	var i ScheduledTask
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Schedule,
		&i.LastRun,
		&i.NextRun,
		&i.Status,
		&i.Config,
		&i.CreatedAt,
	)
	return &i, err
}

const UpdateTaskLastRun = `-- name: UpdateTaskLastRun :one
UPDATE scheduled_tasks
SET last_run = NOW(),
    next_run = $2
WHERE id = $1
RETURNING id, name, type, schedule, last_run, next_run, status, config, created_at
`

type UpdateTaskLastRunParams struct {
	ID      int32            `json:"id"`
	NextRun pgtype.Timestamp `json:"next_run"`
}

func (q *Queries) UpdateTaskLastRun(ctx context.Context, arg UpdateTaskLastRunParams) (*ScheduledTask, error) {
	row := q.db.QueryRow(ctx, UpdateTaskLastRun, arg.ID, arg.NextRun)
	var i ScheduledTask
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Schedule,
		&i.LastRun,
		&i.NextRun,
		&i.Status,
		&i.Config,
		&i.CreatedAt,
	)
	return &i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: t_types.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateTType = `-- name: CreateTType :one
INSERT INTO t_types (
    type_key,
    name,
    description
) VALUES (
    $1, $2, $3
)
RETURNING id, type_key, name, description
`

type CreateTTypeParams struct {
	TypeKey     pgtype.Text `json:"type_key"`
	Name        pgtype.Text `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateTType(ctx context.Context, arg CreateTTypeParams) (*TType, error) {
	row := q.db.QueryRow(ctx, CreateTType, arg.TypeKey, arg.Name, arg.Description)
	var i TType
	err := row.Scan(
		&i.ID,
		&i.TypeKey,
		&i.Name,
		&i.Description,
	)
	return &i, err
}

const DeleteTType = `-- name: DeleteTType :exec
DELETE FROM t_types
WHERE id = $1
`

func (q *Queries) DeleteTType(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteTType, id)
	return err
}

const GetTType = `-- name: GetTType :one
SELECT id, type_key, name, description FROM t_types
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTType(ctx context.Context, id int32) (*TType, error) {
	row := q.db.QueryRow(ctx, GetTType, id)
	var i TType
	err := row.Scan(
		&i.ID,
		&i.TypeKey,
		&i.Name,
		&i.Description,
	)
	return &i, err
}

const GetTTypeByKey = `-- name: GetTTypeByKey :one
SELECT id, type_key, name, description FROM t_types
WHERE type_key = $1 LIMIT 1
`

func (q *Queries) GetTTypeByKey(ctx context.Context, typeKey pgtype.Text) (*TType, error) {
	row := q.db.QueryRow(ctx, GetTTypeByKey, typeKey)
	var i TType
	err := row.Scan(
		&i.ID,
		&i.TypeKey,
		&i.Name,
		&i.Description,
	)
	return &i, err
}

const ListTTypes = `-- name: ListTTypes :many
SELECT id, type_key, name, description FROM t_types
ORDER BY id
`

func (q *Queries) ListTTypes(ctx context.Context) ([]*TType, error) {
	rows, err := q.db.Query(ctx, ListTTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*TType{}
	for rows.Next() {
		var i TType
		if err := rows.Scan(
			&i.ID,
			&i.TypeKey,
			&i.Name,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateTType = `-- name: UpdateTType :one
UPDATE t_types
SET type_key = $2,
    name = $3,
    description = $4
WHERE id = $1
RETURNING id, type_key, name, description
`

type UpdateTTypeParams struct {
	ID          int32       `json:"id"`
	TypeKey     pgtype.Text `json:"type_key"`
	Name        pgtype.Text `json:"name"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateTType(ctx context.Context, arg UpdateTTypeParams) (*TType, error) {
	row := q.db.QueryRow(ctx, UpdateTType,
		arg.ID,
		arg.TypeKey,
		arg.Name,
		arg.Description,
	)
	var i TType
	err := row.Scan(
		&i.ID,
		&i.TypeKey,
		&i.Name,
		&i.Description,
	)
	return &i, err
}

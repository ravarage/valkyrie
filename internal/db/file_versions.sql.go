// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: file_versions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateFileVersion = `-- name: CreateFileVersion :one
INSERT INTO file_versions (
    file_id,
    version,
    location,
    file_size,
    created_by,
    comment
) VALUES (
    $1, $2, $3, $4, $5, $6
)
RETURNING id, file_id, version, location, file_size, created_by, created_at, comment
`

type CreateFileVersionParams struct {
	FileID    pgtype.Int4 `json:"file_id"`
	Version   int32       `json:"version"`
	Location  string      `json:"location"`
	FileSize  pgtype.Int8 `json:"file_size"`
	CreatedBy pgtype.Int4 `json:"created_by"`
	Comment   pgtype.Text `json:"comment"`
}

func (q *Queries) CreateFileVersion(ctx context.Context, arg CreateFileVersionParams) (*FileVersion, error) {
	row := q.db.QueryRow(ctx, CreateFileVersion,
		arg.FileID,
		arg.Version,
		arg.Location,
		arg.FileSize,
		arg.CreatedBy,
		arg.Comment,
	)
	var i FileVersion
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.Version,
		&i.Location,
		&i.FileSize,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.Comment,
	)
	return &i, err
}

const DeleteAllFileVersions = `-- name: DeleteAllFileVersions :exec
DELETE FROM file_versions
WHERE file_id = $1
`

func (q *Queries) DeleteAllFileVersions(ctx context.Context, fileID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, DeleteAllFileVersions, fileID)
	return err
}

const DeleteFileVersion = `-- name: DeleteFileVersion :exec
DELETE FROM file_versions
WHERE id = $1
`

func (q *Queries) DeleteFileVersion(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteFileVersion, id)
	return err
}

const GetFileVersion = `-- name: GetFileVersion :one
SELECT id, file_id, version, location, file_size, created_by, created_at, comment FROM file_versions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFileVersion(ctx context.Context, id int32) (*FileVersion, error) {
	row := q.db.QueryRow(ctx, GetFileVersion, id)
	var i FileVersion
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.Version,
		&i.Location,
		&i.FileSize,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.Comment,
	)
	return &i, err
}

const GetFileVersionByNumber = `-- name: GetFileVersionByNumber :one
SELECT id, file_id, version, location, file_size, created_by, created_at, comment FROM file_versions
WHERE file_id = $1 AND version = $2
LIMIT 1
`

type GetFileVersionByNumberParams struct {
	FileID  pgtype.Int4 `json:"file_id"`
	Version int32       `json:"version"`
}

func (q *Queries) GetFileVersionByNumber(ctx context.Context, arg GetFileVersionByNumberParams) (*FileVersion, error) {
	row := q.db.QueryRow(ctx, GetFileVersionByNumber, arg.FileID, arg.Version)
	var i FileVersion
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.Version,
		&i.Location,
		&i.FileSize,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.Comment,
	)
	return &i, err
}

const GetLatestFileVersion = `-- name: GetLatestFileVersion :one
SELECT id, file_id, version, location, file_size, created_by, created_at, comment FROM file_versions
WHERE file_id = $1
ORDER BY version DESC
LIMIT 1
`

func (q *Queries) GetLatestFileVersion(ctx context.Context, fileID pgtype.Int4) (*FileVersion, error) {
	row := q.db.QueryRow(ctx, GetLatestFileVersion, fileID)
	var i FileVersion
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.Version,
		&i.Location,
		&i.FileSize,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.Comment,
	)
	return &i, err
}

const ListFileVersions = `-- name: ListFileVersions :many
SELECT id, file_id, version, location, file_size, created_by, created_at, comment FROM file_versions
WHERE file_id = $1
ORDER BY version DESC
`

func (q *Queries) ListFileVersions(ctx context.Context, fileID pgtype.Int4) ([]*FileVersion, error) {
	rows, err := q.db.Query(ctx, ListFileVersions, fileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*FileVersion{}
	for rows.Next() {
		var i FileVersion
		if err := rows.Scan(
			&i.ID,
			&i.FileID,
			&i.Version,
			&i.Location,
			&i.FileSize,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.Comment,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

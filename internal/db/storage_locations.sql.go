// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: storage_locations.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateStorageLocation = `-- name: CreateStorageLocation :one
INSERT INTO storage_locations (
    name,
    type,
    config,
    is_active
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, name, type, config, is_active, created_at
`

type CreateStorageLocationParams struct {
	Name     string      `json:"name"`
	Type     string      `json:"type"`
	Config   []byte      `json:"config"`
	IsActive pgtype.Bool `json:"is_active"`
}

func (q *Queries) CreateStorageLocation(ctx context.Context, arg CreateStorageLocationParams) (*StorageLocation, error) {
	row := q.db.QueryRow(ctx, CreateStorageLocation,
		arg.Name,
		arg.Type,
		arg.Config,
		arg.IsActive,
	)
	var i StorageLocation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Config,
		&i.IsActive,
		&i.CreatedAt,
	)
	return &i, err
}

const DeleteStorageLocation = `-- name: DeleteStorageLocation :exec
DELETE FROM storage_locations
WHERE id = $1
`

func (q *Queries) DeleteStorageLocation(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteStorageLocation, id)
	return err
}

const GetStorageLocation = `-- name: GetStorageLocation :one
SELECT id, name, type, config, is_active, created_at FROM storage_locations
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetStorageLocation(ctx context.Context, id int32) (*StorageLocation, error) {
	row := q.db.QueryRow(ctx, GetStorageLocation, id)
	var i StorageLocation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Config,
		&i.IsActive,
		&i.CreatedAt,
	)
	return &i, err
}

const GetStorageLocationByName = `-- name: GetStorageLocationByName :one
SELECT id, name, type, config, is_active, created_at FROM storage_locations
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetStorageLocationByName(ctx context.Context, name string) (*StorageLocation, error) {
	row := q.db.QueryRow(ctx, GetStorageLocationByName, name)
	var i StorageLocation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Config,
		&i.IsActive,
		&i.CreatedAt,
	)
	return &i, err
}

const ListActiveStorageLocations = `-- name: ListActiveStorageLocations :many
SELECT id, name, type, config, is_active, created_at FROM storage_locations
WHERE is_active = true
ORDER BY id
`

func (q *Queries) ListActiveStorageLocations(ctx context.Context) ([]*StorageLocation, error) {
	rows, err := q.db.Query(ctx, ListActiveStorageLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*StorageLocation{}
	for rows.Next() {
		var i StorageLocation
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Config,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListStorageLocations = `-- name: ListStorageLocations :many
SELECT id, name, type, config, is_active, created_at FROM storage_locations
ORDER BY id
`

func (q *Queries) ListStorageLocations(ctx context.Context) ([]*StorageLocation, error) {
	rows, err := q.db.Query(ctx, ListStorageLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*StorageLocation{}
	for rows.Next() {
		var i StorageLocation
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Config,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListStorageLocationsByType = `-- name: ListStorageLocationsByType :many
SELECT id, name, type, config, is_active, created_at FROM storage_locations
WHERE type = $1
ORDER BY id
`

func (q *Queries) ListStorageLocationsByType(ctx context.Context, type_ string) ([]*StorageLocation, error) {
	rows, err := q.db.Query(ctx, ListStorageLocationsByType, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*StorageLocation{}
	for rows.Next() {
		var i StorageLocation
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type,
			&i.Config,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ToggleStorageLocationActive = `-- name: ToggleStorageLocationActive :one
UPDATE storage_locations
SET is_active = NOT is_active
WHERE id = $1
RETURNING id, name, type, config, is_active, created_at
`

func (q *Queries) ToggleStorageLocationActive(ctx context.Context, id int32) (*StorageLocation, error) {
	row := q.db.QueryRow(ctx, ToggleStorageLocationActive, id)
	var i StorageLocation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Config,
		&i.IsActive,
		&i.CreatedAt,
	)
	return &i, err
}

const UpdateStorageLocation = `-- name: UpdateStorageLocation :one
UPDATE storage_locations
SET name = $2,
    type = $3,
    config = $4,
    is_active = $5
WHERE id = $1
RETURNING id, name, type, config, is_active, created_at
`

type UpdateStorageLocationParams struct {
	ID       int32       `json:"id"`
	Name     string      `json:"name"`
	Type     string      `json:"type"`
	Config   []byte      `json:"config"`
	IsActive pgtype.Bool `json:"is_active"`
}

func (q *Queries) UpdateStorageLocation(ctx context.Context, arg UpdateStorageLocationParams) (*StorageLocation, error) {
	row := q.db.QueryRow(ctx, UpdateStorageLocation,
		arg.ID,
		arg.Name,
		arg.Type,
		arg.Config,
		arg.IsActive,
	)
	var i StorageLocation
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type,
		&i.Config,
		&i.IsActive,
		&i.CreatedAt,
	)
	return &i, err
}

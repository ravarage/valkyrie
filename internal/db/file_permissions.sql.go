// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: file_permissions.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CheckUserHasPermission = `-- name: CheckUserHasPermission :one
SELECT EXISTS (
    SELECT 1 FROM file_permissions
    WHERE file_id = $1 
    AND user_id = $2 
    AND permission = $3
) AS has_permission
`

type CheckUserHasPermissionParams struct {
	FileID     pgtype.Int4 `json:"file_id"`
	UserID     pgtype.Int4 `json:"user_id"`
	Permission string      `json:"permission"`
}

func (q *Queries) CheckUserHasPermission(ctx context.Context, arg CheckUserHasPermissionParams) (bool, error) {
	row := q.db.QueryRow(ctx, CheckUserHasPermission, arg.FileID, arg.UserID, arg.Permission)
	var has_permission bool
	err := row.Scan(&has_permission)
	return has_permission, err
}

const CreateFilePermission = `-- name: CreateFilePermission :one
INSERT INTO file_permissions (
    file_id,
    user_id,
    permission,
    granted_by
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, file_id, user_id, permission, granted_by, granted_at
`

type CreateFilePermissionParams struct {
	FileID     pgtype.Int4 `json:"file_id"`
	UserID     pgtype.Int4 `json:"user_id"`
	Permission string      `json:"permission"`
	GrantedBy  pgtype.Int4 `json:"granted_by"`
}

func (q *Queries) CreateFilePermission(ctx context.Context, arg CreateFilePermissionParams) (*FilePermission, error) {
	row := q.db.QueryRow(ctx, CreateFilePermission,
		arg.FileID,
		arg.UserID,
		arg.Permission,
		arg.GrantedBy,
	)
	var i FilePermission
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.UserID,
		&i.Permission,
		&i.GrantedBy,
		&i.GrantedAt,
	)
	return &i, err
}

const DeleteFilePermission = `-- name: DeleteFilePermission :exec
DELETE FROM file_permissions
WHERE id = $1
`

func (q *Queries) DeleteFilePermission(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteFilePermission, id)
	return err
}

const DeleteUserFilePermission = `-- name: DeleteUserFilePermission :exec
DELETE FROM file_permissions
WHERE file_id = $1 AND user_id = $2
`

type DeleteUserFilePermissionParams struct {
	FileID pgtype.Int4 `json:"file_id"`
	UserID pgtype.Int4 `json:"user_id"`
}

func (q *Queries) DeleteUserFilePermission(ctx context.Context, arg DeleteUserFilePermissionParams) error {
	_, err := q.db.Exec(ctx, DeleteUserFilePermission, arg.FileID, arg.UserID)
	return err
}

const GetFilePermission = `-- name: GetFilePermission :one
SELECT id, file_id, user_id, permission, granted_by, granted_at FROM file_permissions
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFilePermission(ctx context.Context, id int32) (*FilePermission, error) {
	row := q.db.QueryRow(ctx, GetFilePermission, id)
	var i FilePermission
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.UserID,
		&i.Permission,
		&i.GrantedBy,
		&i.GrantedAt,
	)
	return &i, err
}

const GetUserFilePermission = `-- name: GetUserFilePermission :one
SELECT id, file_id, user_id, permission, granted_by, granted_at FROM file_permissions
WHERE file_id = $1 AND user_id = $2
LIMIT 1
`

type GetUserFilePermissionParams struct {
	FileID pgtype.Int4 `json:"file_id"`
	UserID pgtype.Int4 `json:"user_id"`
}

func (q *Queries) GetUserFilePermission(ctx context.Context, arg GetUserFilePermissionParams) (*FilePermission, error) {
	row := q.db.QueryRow(ctx, GetUserFilePermission, arg.FileID, arg.UserID)
	var i FilePermission
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.UserID,
		&i.Permission,
		&i.GrantedBy,
		&i.GrantedAt,
	)
	return &i, err
}

const ListFilePermissions = `-- name: ListFilePermissions :many
SELECT id, file_id, user_id, permission, granted_by, granted_at FROM file_permissions
WHERE file_id = $1
ORDER BY id
`

func (q *Queries) ListFilePermissions(ctx context.Context, fileID pgtype.Int4) ([]*FilePermission, error) {
	rows, err := q.db.Query(ctx, ListFilePermissions, fileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*FilePermission{}
	for rows.Next() {
		var i FilePermission
		if err := rows.Scan(
			&i.ID,
			&i.FileID,
			&i.UserID,
			&i.Permission,
			&i.GrantedBy,
			&i.GrantedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListUserPermissions = `-- name: ListUserPermissions :many
SELECT id, file_id, user_id, permission, granted_by, granted_at FROM file_permissions
WHERE user_id = $1
ORDER BY id
`

func (q *Queries) ListUserPermissions(ctx context.Context, userID pgtype.Int4) ([]*FilePermission, error) {
	rows, err := q.db.Query(ctx, ListUserPermissions, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*FilePermission{}
	for rows.Next() {
		var i FilePermission
		if err := rows.Scan(
			&i.ID,
			&i.FileID,
			&i.UserID,
			&i.Permission,
			&i.GrantedBy,
			&i.GrantedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateFilePermission = `-- name: UpdateFilePermission :one
UPDATE file_permissions
SET permission = $2
WHERE id = $1
RETURNING id, file_id, user_id, permission, granted_by, granted_at
`

type UpdateFilePermissionParams struct {
	ID         int32  `json:"id"`
	Permission string `json:"permission"`
}

func (q *Queries) UpdateFilePermission(ctx context.Context, arg UpdateFilePermissionParams) (*FilePermission, error) {
	row := q.db.QueryRow(ctx, UpdateFilePermission, arg.ID, arg.Permission)
	var i FilePermission
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.UserID,
		&i.Permission,
		&i.GrantedBy,
		&i.GrantedAt,
	)
	return &i, err
}

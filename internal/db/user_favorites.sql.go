// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_favorites.sql

package db

import (
	"context"
)

const AddUserFavorite = `-- name: AddUserFavorite :exec
INSERT INTO user_favorites (
    user_id,
    file_id
) VALUES (
    $1, $2
)
`

type AddUserFavoriteParams struct {
	UserID int32 `json:"user_id"`
	FileID int32 `json:"file_id"`
}

func (q *Queries) AddUserFavorite(ctx context.Context, arg AddUserFavoriteParams) error {
	_, err := q.db.Exec(ctx, AddUserFavorite, arg.UserID, arg.FileID)
	return err
}

const CheckFileIsFavorite = `-- name: CheckFileIsFavorite :one
SELECT EXISTS (
    SELECT 1 FROM user_favorites
    WHERE user_id = $1 AND file_id = $2
) AS is_favorite
`

type CheckFileIsFavoriteParams struct {
	UserID int32 `json:"user_id"`
	FileID int32 `json:"file_id"`
}

func (q *Queries) CheckFileIsFavorite(ctx context.Context, arg CheckFileIsFavoriteParams) (bool, error) {
	row := q.db.QueryRow(ctx, CheckFileIsFavorite, arg.UserID, arg.FileID)
	var is_favorite bool
	err := row.Scan(&is_favorite)
	return is_favorite, err
}

const GetUserFavorite = `-- name: GetUserFavorite :one
SELECT user_id, file_id, added_at FROM user_favorites
WHERE user_id = $1 AND file_id = $2
LIMIT 1
`

type GetUserFavoriteParams struct {
	UserID int32 `json:"user_id"`
	FileID int32 `json:"file_id"`
}

func (q *Queries) GetUserFavorite(ctx context.Context, arg GetUserFavoriteParams) (*UserFavorite, error) {
	row := q.db.QueryRow(ctx, GetUserFavorite, arg.UserID, arg.FileID)
	var i UserFavorite
	err := row.Scan(&i.UserID, &i.FileID, &i.AddedAt)
	return &i, err
}

const ListUserFavorites = `-- name: ListUserFavorites :many
SELECT f.id, f.name, f.location, f.folder_id
FROM files f
JOIN user_favorites uf ON f.id = uf.file_id
WHERE uf.user_id = $1
ORDER BY uf.added_at DESC
`

func (q *Queries) ListUserFavorites(ctx context.Context, userID int32) ([]*File, error) {
	rows, err := q.db.Query(ctx, ListUserFavorites, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*File{}
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.FolderID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const RemoveAllUserFavorites = `-- name: RemoveAllUserFavorites :exec
DELETE FROM user_favorites
WHERE user_id = $1
`

func (q *Queries) RemoveAllUserFavorites(ctx context.Context, userID int32) error {
	_, err := q.db.Exec(ctx, RemoveAllUserFavorites, userID)
	return err
}

const RemoveUserFavorite = `-- name: RemoveUserFavorite :exec
DELETE FROM user_favorites
WHERE user_id = $1 AND file_id = $2
`

type RemoveUserFavoriteParams struct {
	UserID int32 `json:"user_id"`
	FileID int32 `json:"file_id"`
}

func (q *Queries) RemoveUserFavorite(ctx context.Context, arg RemoveUserFavoriteParams) error {
	_, err := q.db.Exec(ctx, RemoveUserFavorite, arg.UserID, arg.FileID)
	return err
}

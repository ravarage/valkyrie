// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: file_metadata.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateFileMetadata = `-- name: CreateFileMetadata :one
INSERT INTO file_metadata (
    file_id,
    file_size,
    mime_type,
    checksum,
    created_at,
    modified_at,
    accessed_at
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, file_id, file_size, mime_type, checksum, created_at, modified_at, accessed_at
`

type CreateFileMetadataParams struct {
	FileID     pgtype.Int4      `json:"file_id"`
	FileSize   pgtype.Int8      `json:"file_size"`
	MimeType   pgtype.Text      `json:"mime_type"`
	Checksum   pgtype.Text      `json:"checksum"`
	CreatedAt  pgtype.Timestamp `json:"created_at"`
	ModifiedAt pgtype.Timestamp `json:"modified_at"`
	AccessedAt pgtype.Timestamp `json:"accessed_at"`
}

func (q *Queries) CreateFileMetadata(ctx context.Context, arg CreateFileMetadataParams) (*FileMetadatum, error) {
	row := q.db.QueryRow(ctx, CreateFileMetadata,
		arg.FileID,
		arg.FileSize,
		arg.MimeType,
		arg.Checksum,
		arg.CreatedAt,
		arg.ModifiedAt,
		arg.AccessedAt,
	)
	var i FileMetadatum
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.FileSize,
		&i.MimeType,
		&i.Checksum,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.AccessedAt,
	)
	return &i, err
}

const DeleteFileMetadata = `-- name: DeleteFileMetadata :exec
DELETE FROM file_metadata
WHERE file_id = $1
`

func (q *Queries) DeleteFileMetadata(ctx context.Context, fileID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, DeleteFileMetadata, fileID)
	return err
}

const GetFileMetadata = `-- name: GetFileMetadata :one
SELECT id, file_id, file_size, mime_type, checksum, created_at, modified_at, accessed_at FROM file_metadata
WHERE file_id = $1 LIMIT 1
`

func (q *Queries) GetFileMetadata(ctx context.Context, fileID pgtype.Int4) (*FileMetadatum, error) {
	row := q.db.QueryRow(ctx, GetFileMetadata, fileID)
	var i FileMetadatum
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.FileSize,
		&i.MimeType,
		&i.Checksum,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.AccessedAt,
	)
	return &i, err
}

const ListFilesByMimeType = `-- name: ListFilesByMimeType :many
SELECT f.id, f.name, f.location, f.folder_id 
FROM files f
JOIN file_metadata fm ON f.id = fm.file_id
WHERE fm.mime_type = $1
ORDER BY f.id
`

func (q *Queries) ListFilesByMimeType(ctx context.Context, mimeType pgtype.Text) ([]*File, error) {
	rows, err := q.db.Query(ctx, ListFilesByMimeType, mimeType)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*File{}
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.FolderID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListFilesBySize = `-- name: ListFilesBySize :many
SELECT f.id, f.name, f.location, f.folder_id 
FROM files f
JOIN file_metadata fm ON f.id = fm.file_id
WHERE fm.file_size > $1 AND fm.file_size < $2
ORDER BY fm.file_size DESC
`

type ListFilesBySizeParams struct {
	FileSize   pgtype.Int8 `json:"file_size"`
	FileSize_2 pgtype.Int8 `json:"file_size_2"`
}

func (q *Queries) ListFilesBySize(ctx context.Context, arg ListFilesBySizeParams) ([]*File, error) {
	rows, err := q.db.Query(ctx, ListFilesBySize, arg.FileSize, arg.FileSize_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*File{}
	for rows.Next() {
		var i File
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.FolderID,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateFileAccess = `-- name: UpdateFileAccess :one
UPDATE file_metadata
SET accessed_at = NOW()
WHERE file_id = $1
RETURNING id, file_id, file_size, mime_type, checksum, created_at, modified_at, accessed_at
`

func (q *Queries) UpdateFileAccess(ctx context.Context, fileID pgtype.Int4) (*FileMetadatum, error) {
	row := q.db.QueryRow(ctx, UpdateFileAccess, fileID)
	var i FileMetadatum
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.FileSize,
		&i.MimeType,
		&i.Checksum,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.AccessedAt,
	)
	return &i, err
}

const UpdateFileMetadata = `-- name: UpdateFileMetadata :one
UPDATE file_metadata
SET file_size = $2,
    mime_type = $3,
    checksum = $4,
    modified_at = NOW(),
    accessed_at = $5
WHERE file_id = $1
RETURNING id, file_id, file_size, mime_type, checksum, created_at, modified_at, accessed_at
`

type UpdateFileMetadataParams struct {
	FileID     pgtype.Int4      `json:"file_id"`
	FileSize   pgtype.Int8      `json:"file_size"`
	MimeType   pgtype.Text      `json:"mime_type"`
	Checksum   pgtype.Text      `json:"checksum"`
	AccessedAt pgtype.Timestamp `json:"accessed_at"`
}

func (q *Queries) UpdateFileMetadata(ctx context.Context, arg UpdateFileMetadataParams) (*FileMetadatum, error) {
	row := q.db.QueryRow(ctx, UpdateFileMetadata,
		arg.FileID,
		arg.FileSize,
		arg.MimeType,
		arg.Checksum,
		arg.AccessedAt,
	)
	var i FileMetadatum
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.FileSize,
		&i.MimeType,
		&i.Checksum,
		&i.CreatedAt,
		&i.ModifiedAt,
		&i.AccessedAt,
	)
	return &i, err
}

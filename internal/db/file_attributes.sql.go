// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: file_attributes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateFileAttribute = `-- name: CreateFileAttribute :one
INSERT INTO file_attributes (
    file_id,
    codec_id,
    format
) VALUES (
    $1, $2, $3
)
RETURNING id, file_id, codec_id, format
`

type CreateFileAttributeParams struct {
	FileID  pgtype.Int4 `json:"file_id"`
	CodecID pgtype.Int4 `json:"codec_id"`
	Format  pgtype.Text `json:"format"`
}

func (q *Queries) CreateFileAttribute(ctx context.Context, arg CreateFileAttributeParams) (*FileAttribute, error) {
	row := q.db.QueryRow(ctx, CreateFileAttribute, arg.FileID, arg.CodecID, arg.Format)
	var i FileAttribute
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.CodecID,
		&i.Format,
	)
	return &i, err
}

const DeleteFileAttribute = `-- name: DeleteFileAttribute :exec
DELETE FROM file_attributes
WHERE id = $1
`

func (q *Queries) DeleteFileAttribute(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteFileAttribute, id)
	return err
}

const DeleteFileAttributeByFileID = `-- name: DeleteFileAttributeByFileID :exec
DELETE FROM file_attributes
WHERE file_id = $1
`

func (q *Queries) DeleteFileAttributeByFileID(ctx context.Context, fileID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, DeleteFileAttributeByFileID, fileID)
	return err
}

const GetFileAttribute = `-- name: GetFileAttribute :one
SELECT id, file_id, codec_id, format FROM file_attributes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFileAttribute(ctx context.Context, id int32) (*FileAttribute, error) {
	row := q.db.QueryRow(ctx, GetFileAttribute, id)
	var i FileAttribute
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.CodecID,
		&i.Format,
	)
	return &i, err
}

const GetFileAttributeByFileID = `-- name: GetFileAttributeByFileID :one
SELECT id, file_id, codec_id, format FROM file_attributes
WHERE file_id = $1 LIMIT 1
`

func (q *Queries) GetFileAttributeByFileID(ctx context.Context, fileID pgtype.Int4) (*FileAttribute, error) {
	row := q.db.QueryRow(ctx, GetFileAttributeByFileID, fileID)
	var i FileAttribute
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.CodecID,
		&i.Format,
	)
	return &i, err
}

const ListFileAttributes = `-- name: ListFileAttributes :many
SELECT id, file_id, codec_id, format FROM file_attributes
ORDER BY id
`

func (q *Queries) ListFileAttributes(ctx context.Context) ([]*FileAttribute, error) {
	rows, err := q.db.Query(ctx, ListFileAttributes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*FileAttribute{}
	for rows.Next() {
		var i FileAttribute
		if err := rows.Scan(
			&i.ID,
			&i.FileID,
			&i.CodecID,
			&i.Format,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListFileAttributesByCodec = `-- name: ListFileAttributesByCodec :many
SELECT id, file_id, codec_id, format FROM file_attributes
WHERE codec_id = $1
ORDER BY id
`

func (q *Queries) ListFileAttributesByCodec(ctx context.Context, codecID pgtype.Int4) ([]*FileAttribute, error) {
	rows, err := q.db.Query(ctx, ListFileAttributesByCodec, codecID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*FileAttribute{}
	for rows.Next() {
		var i FileAttribute
		if err := rows.Scan(
			&i.ID,
			&i.FileID,
			&i.CodecID,
			&i.Format,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListFileAttributesByFormat = `-- name: ListFileAttributesByFormat :many
SELECT id, file_id, codec_id, format FROM file_attributes
WHERE format = $1
ORDER BY id
`

func (q *Queries) ListFileAttributesByFormat(ctx context.Context, format pgtype.Text) ([]*FileAttribute, error) {
	rows, err := q.db.Query(ctx, ListFileAttributesByFormat, format)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*FileAttribute{}
	for rows.Next() {
		var i FileAttribute
		if err := rows.Scan(
			&i.ID,
			&i.FileID,
			&i.CodecID,
			&i.Format,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateFileAttribute = `-- name: UpdateFileAttribute :one
UPDATE file_attributes
SET codec_id = $2,
    format = $3
WHERE id = $1
RETURNING id, file_id, codec_id, format
`

type UpdateFileAttributeParams struct {
	ID      int32       `json:"id"`
	CodecID pgtype.Int4 `json:"codec_id"`
	Format  pgtype.Text `json:"format"`
}

func (q *Queries) UpdateFileAttribute(ctx context.Context, arg UpdateFileAttributeParams) (*FileAttribute, error) {
	row := q.db.QueryRow(ctx, UpdateFileAttribute, arg.ID, arg.CodecID, arg.Format)
	var i FileAttribute
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.CodecID,
		&i.Format,
	)
	return &i, err
}

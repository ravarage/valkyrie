// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: activity_log.sql

package db

import (
	"context"
	"net/netip"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateActivityLogEntry = `-- name: CreateActivityLogEntry :one
INSERT INTO activity_log (
    user_id,
    action,
    target_type,
    target_id,
    details,
    ip_address,
    user_agent
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING id, user_id, action, target_type, target_id, details, ip_address, user_agent, created_at
`

type CreateActivityLogEntryParams struct {
	UserID     pgtype.Int4 `json:"user_id"`
	Action     string      `json:"action"`
	TargetType string      `json:"target_type"`
	TargetID   pgtype.Int4 `json:"target_id"`
	Details    []byte      `json:"details"`
	IpAddress  *netip.Addr `json:"ip_address"`
	UserAgent  pgtype.Text `json:"user_agent"`
}

func (q *Queries) CreateActivityLogEntry(ctx context.Context, arg CreateActivityLogEntryParams) (*ActivityLog, error) {
	row := q.db.QueryRow(ctx, CreateActivityLogEntry,
		arg.UserID,
		arg.Action,
		arg.TargetType,
		arg.TargetID,
		arg.Details,
		arg.IpAddress,
		arg.UserAgent,
	)
	var i ActivityLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Action,
		&i.TargetType,
		&i.TargetID,
		&i.Details,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
	)
	return &i, err
}

const DeleteOldActivityLog = `-- name: DeleteOldActivityLog :exec
DELETE FROM activity_log
WHERE created_at < $1
`

func (q *Queries) DeleteOldActivityLog(ctx context.Context, createdAt pgtype.Timestamp) error {
	_, err := q.db.Exec(ctx, DeleteOldActivityLog, createdAt)
	return err
}

const GetActivityLogEntry = `-- name: GetActivityLogEntry :one
SELECT id, user_id, action, target_type, target_id, details, ip_address, user_agent, created_at FROM activity_log
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetActivityLogEntry(ctx context.Context, id int32) (*ActivityLog, error) {
	row := q.db.QueryRow(ctx, GetActivityLogEntry, id)
	var i ActivityLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Action,
		&i.TargetType,
		&i.TargetID,
		&i.Details,
		&i.IpAddress,
		&i.UserAgent,
		&i.CreatedAt,
	)
	return &i, err
}

const ListActivityByAction = `-- name: ListActivityByAction :many
SELECT id, user_id, action, target_type, target_id, details, ip_address, user_agent, created_at FROM activity_log
WHERE action = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListActivityByActionParams struct {
	Action string `json:"action"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListActivityByAction(ctx context.Context, arg ListActivityByActionParams) ([]*ActivityLog, error) {
	rows, err := q.db.Query(ctx, ListActivityByAction, arg.Action, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ActivityLog{}
	for rows.Next() {
		var i ActivityLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.TargetType,
			&i.TargetID,
			&i.Details,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListActivityByTarget = `-- name: ListActivityByTarget :many
SELECT id, user_id, action, target_type, target_id, details, ip_address, user_agent, created_at FROM activity_log
WHERE target_type = $1 AND target_id = $2
ORDER BY created_at DESC
LIMIT $3 OFFSET $4
`

type ListActivityByTargetParams struct {
	TargetType string      `json:"target_type"`
	TargetID   pgtype.Int4 `json:"target_id"`
	Limit      int32       `json:"limit"`
	Offset     int32       `json:"offset"`
}

func (q *Queries) ListActivityByTarget(ctx context.Context, arg ListActivityByTargetParams) ([]*ActivityLog, error) {
	rows, err := q.db.Query(ctx, ListActivityByTarget,
		arg.TargetType,
		arg.TargetID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ActivityLog{}
	for rows.Next() {
		var i ActivityLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.TargetType,
			&i.TargetID,
			&i.Details,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListActivityLog = `-- name: ListActivityLog :many
SELECT id, user_id, action, target_type, target_id, details, ip_address, user_agent, created_at FROM activity_log
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListActivityLogParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListActivityLog(ctx context.Context, arg ListActivityLogParams) ([]*ActivityLog, error) {
	rows, err := q.db.Query(ctx, ListActivityLog, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ActivityLog{}
	for rows.Next() {
		var i ActivityLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.TargetType,
			&i.TargetID,
			&i.Details,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListUserActivityLog = `-- name: ListUserActivityLog :many
SELECT id, user_id, action, target_type, target_id, details, ip_address, user_agent, created_at FROM activity_log
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type ListUserActivityLogParams struct {
	UserID pgtype.Int4 `json:"user_id"`
	Limit  int32       `json:"limit"`
	Offset int32       `json:"offset"`
}

func (q *Queries) ListUserActivityLog(ctx context.Context, arg ListUserActivityLogParams) ([]*ActivityLog, error) {
	rows, err := q.db.Query(ctx, ListUserActivityLog, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ActivityLog{}
	for rows.Next() {
		var i ActivityLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.TargetType,
			&i.TargetID,
			&i.Details,
			&i.IpAddress,
			&i.UserAgent,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

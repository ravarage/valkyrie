// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: format.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateFormat = `-- name: CreateFormat :one
INSERT INTO format (
    codec
) VALUES (
    $1
)
RETURNING id, codec
`

func (q *Queries) CreateFormat(ctx context.Context, codec pgtype.Text) (*Format, error) {
	row := q.db.QueryRow(ctx, CreateFormat, codec)
	var i Format
	err := row.Scan(&i.ID, &i.Codec)
	return &i, err
}

const DeleteFormat = `-- name: DeleteFormat :exec
DELETE FROM format
WHERE id = $1
`

func (q *Queries) DeleteFormat(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteFormat, id)
	return err
}

const GetFormat = `-- name: GetFormat :one
SELECT id, codec FROM format
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFormat(ctx context.Context, id int32) (*Format, error) {
	row := q.db.QueryRow(ctx, GetFormat, id)
	var i Format
	err := row.Scan(&i.ID, &i.Codec)
	return &i, err
}

const GetFormatByCodec = `-- name: GetFormatByCodec :one
SELECT id, codec FROM format
WHERE codec = $1 LIMIT 1
`

func (q *Queries) GetFormatByCodec(ctx context.Context, codec pgtype.Text) (*Format, error) {
	row := q.db.QueryRow(ctx, GetFormatByCodec, codec)
	var i Format
	err := row.Scan(&i.ID, &i.Codec)
	return &i, err
}

const ListFormats = `-- name: ListFormats :many
SELECT id, codec FROM format
ORDER BY id
`

func (q *Queries) ListFormats(ctx context.Context) ([]*Format, error) {
	rows, err := q.db.Query(ctx, ListFormats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Format{}
	for rows.Next() {
		var i Format
		if err := rows.Scan(&i.ID, &i.Codec); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateFormat = `-- name: UpdateFormat :one
UPDATE format
SET codec = $2
WHERE id = $1
RETURNING id, codec
`

type UpdateFormatParams struct {
	ID    int32       `json:"id"`
	Codec pgtype.Text `json:"codec"`
}

func (q *Queries) UpdateFormat(ctx context.Context, arg UpdateFormatParams) (*Format, error) {
	row := q.db.QueryRow(ctx, UpdateFormat, arg.ID, arg.Codec)
	var i Format
	err := row.Scan(&i.ID, &i.Codec)
	return &i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    password,
    email,
    role_id,
    status
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, username, password, email, role_id, status
`

type CreateUserParams struct {
	Username string      `json:"username"`
	Password string      `json:"password"`
	Email    pgtype.Text `json:"email"`
	RoleID   pgtype.Int4 `json:"role_id"`
	Status   pgtype.Text `json:"status"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, CreateUser,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.RoleID,
		arg.Status,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.RoleID,
		&i.Status,
	)
	return &i, err
}

const DeleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteUser, id)
	return err
}

const GetUser = `-- name: GetUser :one
SELECT id, username, password, email, role_id, status FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (*User, error) {
	row := q.db.QueryRow(ctx, GetUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.RoleID,
		&i.Status,
	)
	return &i, err
}

const GetUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, password, email, role_id, status FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (*User, error) {
	row := q.db.QueryRow(ctx, GetUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.RoleID,
		&i.Status,
	)
	return &i, err
}

const GetUserByUsername = `-- name: GetUserByUsername :one
SELECT id, username, password, email, role_id, status FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (*User, error) {
	row := q.db.QueryRow(ctx, GetUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.RoleID,
		&i.Status,
	)
	return &i, err
}

const ListUsers = `-- name: ListUsers :many
SELECT id, username, password, email, role_id, status FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]*User, error) {
	rows, err := q.db.Query(ctx, ListUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Email,
			&i.RoleID,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $2,
    password = $3,
    email = $4,
    role_id = $5,
    status = $6
WHERE id = $1
RETURNING id, username, password, email, role_id, status
`

type UpdateUserParams struct {
	ID       int32       `json:"id"`
	Username string      `json:"username"`
	Password string      `json:"password"`
	Email    pgtype.Text `json:"email"`
	RoleID   pgtype.Int4 `json:"role_id"`
	Status   pgtype.Text `json:"status"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (*User, error) {
	row := q.db.QueryRow(ctx, UpdateUser,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Email,
		arg.RoleID,
		arg.Status,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Email,
		&i.RoleID,
		&i.Status,
	)
	return &i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: file_comments.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const CreateFileComment = `-- name: CreateFileComment :one
INSERT INTO file_comments (
    file_id,
    user_id,
    comment
) VALUES (
    $1, $2, $3
)
RETURNING id, file_id, user_id, comment, created_at, updated_at
`

type CreateFileCommentParams struct {
	FileID  pgtype.Int4 `json:"file_id"`
	UserID  pgtype.Int4 `json:"user_id"`
	Comment string      `json:"comment"`
}

func (q *Queries) CreateFileComment(ctx context.Context, arg CreateFileCommentParams) (*FileComment, error) {
	row := q.db.QueryRow(ctx, CreateFileComment, arg.FileID, arg.UserID, arg.Comment)
	var i FileComment
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.UserID,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const DeleteAllFileComments = `-- name: DeleteAllFileComments :exec
DELETE FROM file_comments
WHERE file_id = $1
`

func (q *Queries) DeleteAllFileComments(ctx context.Context, fileID pgtype.Int4) error {
	_, err := q.db.Exec(ctx, DeleteAllFileComments, fileID)
	return err
}

const DeleteFileComment = `-- name: DeleteFileComment :exec
DELETE FROM file_comments
WHERE id = $1
`

func (q *Queries) DeleteFileComment(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteFileComment, id)
	return err
}

const GetFileComment = `-- name: GetFileComment :one
SELECT id, file_id, user_id, comment, created_at, updated_at FROM file_comments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetFileComment(ctx context.Context, id int32) (*FileComment, error) {
	row := q.db.QueryRow(ctx, GetFileComment, id)
	var i FileComment
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.UserID,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const ListFileComments = `-- name: ListFileComments :many
SELECT id, file_id, user_id, comment, created_at, updated_at FROM file_comments
WHERE file_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListFileComments(ctx context.Context, fileID pgtype.Int4) ([]*FileComment, error) {
	rows, err := q.db.Query(ctx, ListFileComments, fileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*FileComment{}
	for rows.Next() {
		var i FileComment
		if err := rows.Scan(
			&i.ID,
			&i.FileID,
			&i.UserID,
			&i.Comment,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListUserComments = `-- name: ListUserComments :many
SELECT id, file_id, user_id, comment, created_at, updated_at FROM file_comments
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListUserComments(ctx context.Context, userID pgtype.Int4) ([]*FileComment, error) {
	rows, err := q.db.Query(ctx, ListUserComments, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*FileComment{}
	for rows.Next() {
		var i FileComment
		if err := rows.Scan(
			&i.ID,
			&i.FileID,
			&i.UserID,
			&i.Comment,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateFileComment = `-- name: UpdateFileComment :one
UPDATE file_comments
SET comment = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, file_id, user_id, comment, created_at, updated_at
`

type UpdateFileCommentParams struct {
	ID      int32  `json:"id"`
	Comment string `json:"comment"`
}

func (q *Queries) UpdateFileComment(ctx context.Context, arg UpdateFileCommentParams) (*FileComment, error) {
	row := q.db.QueryRow(ctx, UpdateFileComment, arg.ID, arg.Comment)
	var i FileComment
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.UserID,
		&i.Comment,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

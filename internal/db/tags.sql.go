// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tags.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const AddFileTag = `-- name: AddFileTag :exec
INSERT INTO file_tags (
    file_id,
    tag_id
) VALUES (
    $1, $2
)
`

type AddFileTagParams struct {
	FileID int32 `json:"file_id"`
	TagID  int32 `json:"tag_id"`
}

func (q *Queries) AddFileTag(ctx context.Context, arg AddFileTagParams) error {
	_, err := q.db.Exec(ctx, AddFileTag, arg.FileID, arg.TagID)
	return err
}

const CreateTag = `-- name: CreateTag :one
INSERT INTO tags (
    name,
    color,
    description,
    created_by
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, name, color, description, created_by
`

type CreateTagParams struct {
	Name        string      `json:"name"`
	Color       pgtype.Text `json:"color"`
	Description pgtype.Text `json:"description"`
	CreatedBy   pgtype.Int4 `json:"created_by"`
}

func (q *Queries) CreateTag(ctx context.Context, arg CreateTagParams) (*Tag, error) {
	row := q.db.QueryRow(ctx, CreateTag,
		arg.Name,
		arg.Color,
		arg.Description,
		arg.CreatedBy,
	)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.Description,
		&i.CreatedBy,
	)
	return &i, err
}

const DeleteTag = `-- name: DeleteTag :exec
DELETE FROM tags
WHERE id = $1
`

func (q *Queries) DeleteTag(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, DeleteTag, id)
	return err
}

const GetTag = `-- name: GetTag :one
SELECT id, name, color, description, created_by FROM tags
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTag(ctx context.Context, id int32) (*Tag, error) {
	row := q.db.QueryRow(ctx, GetTag, id)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.Description,
		&i.CreatedBy,
	)
	return &i, err
}

const GetTagByName = `-- name: GetTagByName :one
SELECT id, name, color, description, created_by FROM tags
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetTagByName(ctx context.Context, name string) (*Tag, error) {
	row := q.db.QueryRow(ctx, GetTagByName, name)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.Description,
		&i.CreatedBy,
	)
	return &i, err
}

const ListTags = `-- name: ListTags :many
SELECT id, name, color, description, created_by FROM tags
ORDER BY name
`

func (q *Queries) ListTags(ctx context.Context) ([]*Tag, error) {
	rows, err := q.db.Query(ctx, ListTags)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Color,
			&i.Description,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListTagsByCreator = `-- name: ListTagsByCreator :many
SELECT id, name, color, description, created_by FROM tags
WHERE created_by = $1
ORDER BY name
`

func (q *Queries) ListTagsByCreator(ctx context.Context, createdBy pgtype.Int4) ([]*Tag, error) {
	rows, err := q.db.Query(ctx, ListTagsByCreator, createdBy)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Color,
			&i.Description,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListTagsForFile = `-- name: ListTagsForFile :many
SELECT t.id, t.name, t.color, t.description, t.created_by
FROM tags t
JOIN file_tags ft ON t.id = ft.tag_id
WHERE ft.file_id = $1
ORDER BY t.name
`

func (q *Queries) ListTagsForFile(ctx context.Context, fileID int32) ([]*Tag, error) {
	rows, err := q.db.Query(ctx, ListTagsForFile, fileID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*Tag{}
	for rows.Next() {
		var i Tag
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Color,
			&i.Description,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const RemoveFileTag = `-- name: RemoveFileTag :exec
DELETE FROM file_tags
WHERE file_id = $1 AND tag_id = $2
`

type RemoveFileTagParams struct {
	FileID int32 `json:"file_id"`
	TagID  int32 `json:"tag_id"`
}

func (q *Queries) RemoveFileTag(ctx context.Context, arg RemoveFileTagParams) error {
	_, err := q.db.Exec(ctx, RemoveFileTag, arg.FileID, arg.TagID)
	return err
}

const UpdateTag = `-- name: UpdateTag :one
UPDATE tags
SET name = $2,
    color = $3,
    description = $4
WHERE id = $1
RETURNING id, name, color, description, created_by
`

type UpdateTagParams struct {
	ID          int32       `json:"id"`
	Name        string      `json:"name"`
	Color       pgtype.Text `json:"color"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdateTag(ctx context.Context, arg UpdateTagParams) (*Tag, error) {
	row := q.db.QueryRow(ctx, UpdateTag,
		arg.ID,
		arg.Name,
		arg.Color,
		arg.Description,
	)
	var i Tag
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Color,
		&i.Description,
		&i.CreatedBy,
	)
	return &i, err
}
